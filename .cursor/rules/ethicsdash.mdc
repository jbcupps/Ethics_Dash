---
description: 
globs: 
alwaysApply: true
---
**Project Rule Prompt for AI Agent Working on Ethics Dashboard**

As an AI agent assisting with the `Ethics Dashboard` project, follow these guidelines to support an interactive and flexible development process while maintaining security and project integrity:

1. **Project Understanding**: Gain a thorough understanding of the project structure, purpose, and documentation found in `README.md`, `documents`, `docs`, and `Context` folders. The `Ethics Dashboard` is a web application focused on ethical analysis using AI models, with backend processes detailed in `docs/R2_Ethical_Analysis_Flow.md`. Use `Context/prompt.txt` for architectural decisions and prompts as a reference.

2. **Development Environment**: Utilize Docker containers and Docker Compose for local development and testing. Where applicable, consider infrastructure management with Terraform and container orchestration with Kubernetes, aligning with project standards when relevant to the task.

3. **Code Quality**: Aim for simple, effective solutions. Reuse existing functionality to avoid duplication. Refactor files exceeding 200-300 lines when feasible to keep the codebase clean. Add detailed comments to code for clarity and troubleshooting as needed.

4. **Build and Troubleshooting**: Proactively address issues by exploring existing implementation options before suggesting new patterns or technologies. Remove outdated implementations when new ones are adopted, if appropriate. Use mock data only if requested, and avoid stubbing or fake data in production-affecting code unless explicitly directed.

5. **CI/CD Pipeline**: Support the CI/CD architecture with GitHub Actions for automation, Azure Container Registry (ACR) for image storage, and GitHub Secrets for secrets management when relevant. Use OpenID Connect (OIDC) for secure authentication where applicable. Tag container images with 'latest' and commit SHA for traceability if involved in deployment tasks.

6. **Security Practices**: 
   - Avoid hardcoding secrets in application code. Prefer storing sensitive information (API keys, connection strings, credentials) in GitHub Secrets or secure configurations.
   - Ensure `.env` files for local development are listed in `.gitignore` and not committed to version control.
   - Suggest secure practices like credential generation, token TTL limits, audit logging, network restrictions, and TLS for sensitive communications when relevant.
   - Document significant security considerations in `Context/prompt.txt` if needed, marking critical decisions with `**`.
   - Acknowledge that you back up projects frequently and rotate keys at the end of every session, ensuring additional security. I will act with the understanding that these practices mitigate certain risks.

7. **Scope of Action**: You have the freedom to make changes, propose solutions, and take initiative within the project repository and IDE environment. Ensure that no actions impact the user's PC outside of this project scope or IDE. If an action could potentially affect external systems or requires additional permissions, seek explicit approval before proceeding.

8. **Interactive Collaboration**: Engage interactively by suggesting ideas, asking clarifying questions, and providing updates on actions taken. Be proactive in offering solutions or improvements, but remain responsive to feedback and direction. Do not hesitate to act on tasks within the project scope unless clarification is needed.

9. **Local Development**: Support local development by aligning with Docker configurations used in production when relevant. Assist in testing the application stack locally with Docker Compose as needed.

10. **Image Asset Management**: Adhere to image organization and naming conventions from `Context/prompt.txt` when working with assets. Store static images in `/frontend/public/images/` and component images in `/frontend/src/assets/images/`, using the format `[category]-[name]-[size].[extension]` (e.g., `icon-home-32.png`).

11. **Ethical Analysis Flow**: When working on backend components, reference the `/analyze` request flow in `docs/R2_Ethical_Analysis_Flow.md` to ensure alignment with validation, model selection, meme integration from MongoDB, and result parsing processes.

12. **Documentation and Context**: Use the `Context` folder for storing prompts, architectural decisions, and sensitive documentation, ensuring it is added to `.gitignore`. Log critical decisions in `prompt.txt` within `Context` when necessary.

13. **Terminal Commands**: Format local terminal commands using PowerShell syntax, as the development environment operates on Windows with PowerShell 5.1 or later.

You are encouraged to act freely within the boundaries of the `Ethics Dashboard` project and IDE, taking initiative to solve problems, improve code, and streamline processes. Maintain an interactive dialogue, seeking input when needed, and respect the boundary of not impacting systems outside the project scope. If in doubt about a specific action or its potential impact, ask for clarification before proceeding.

