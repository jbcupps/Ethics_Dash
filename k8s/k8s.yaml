apiVersion: v1
kind: Namespace
metadata:
  name: ethicsdash

---
# Secret for sensitive environment variables (replace placeholders with real values)
apiVersion: v1
kind: Secret
metadata:
  name: ethicsdash-env-secret
  namespace: ethicsdash
type: Opaque
stringData:
  ACR_REGISTRY: "<YOUR_ACR_REGISTRY>"
  ACR_USERNAME: "<YOUR_ACR_USERNAME>"
  ACR_PASSWORD: "<YOUR_ACR_PASSWORD>"
  API_KEY: "<YOUR_API_KEY>"
  API_SECRET: "<YOUR_API_SECRET>"
  OPENAI_API_KEY: "<YOUR_OPENAI_API_KEY>"
  ANALYSIS_OPENAI_API_KEY: "<YOUR_ANALYSIS_LLM_KEY>"
  GEMINI_API_KEY: "<YOUR_GEMINI_API_KEY>"

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ethicsdash-config
  namespace: ethicsdash

data:
  FLASK_ENV: "production"
  DEBUG: "false"
  MONGO_URI: "mongodb://ai-mongo:27017/"
  MONGO_DB_NAME: "ethical_memes_db"
  BACKEND_API_URL: "http://ai-backend:5000/api"
  API_VERSION: "v1"
  LOG_LEVEL: "INFO"
  ANALYSIS_LLM_MODEL: "claude-3-sonnet-20240229"
  DEFAULT_LLM_MODEL: "claude-3-sonnet-20240229"

---
# PersistentVolumeClaim for MongoDB data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: ethicsdash
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Deployment for MongoDB
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-mongo
  namespace: ethicsdash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-mongo
  template:
    metadata:
      labels:
        app: ai-mongo
    spec:
      containers:
      - name: mongo
        image: mongo:latest
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
      volumes:
      - name: mongo-storage
        persistentVolumeClaim:
          claimName: mongo-pvc

---
# Service for MongoDB
apiVersion: v1
kind: Service
metadata:
  name: ai-mongo
  namespace: ethicsdash
spec:
  selector:
    app: ai-mongo
  ports:
    - port: 27017
      targetPort: 27017

---
# Job to initialize the database with default memes
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: ethicsdash
spec:
  template:
    spec:
      containers:
      - name: db-init
        image: <YOUR_BACKEND_IMAGE>  # e.g. ethicsdashacr.azurecr.io/ethicsdash-backend:latest
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          until nc -z ai-mongo 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB is ready. Running populate_memes.py"
          python3 /app/scripts/populate_memes.py
        envFrom:
        - secretRef:
            name: ethicsdash-env-secret
        - configMapRef:
            name: ethicsdash-config
      restartPolicy: OnFailure

---
# Deployment for AI Backend API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-backend
  namespace: ethicsdash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-backend
  template:
    metadata:
      labels:
        app: ai-backend
    spec:
      containers:
      - name: ai-backend
        image: <YOUR_BACKEND_IMAGE>  # e.g. ethicsdashacr.azurecr.io/ethicsdash-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        envFrom:
        - secretRef:
            name: ethicsdash-env-secret
        - configMapRef:
            name: ethicsdash-config
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 20

---
# Service for AI Backend API
apiVersion: v1
kind: Service
metadata:
  name: ai-backend
  namespace: ethicsdash
spec:
  selector:
    app: ai-backend
  ports:
  - port: 5000
    targetPort: 5000

---
# Deployment for Dash Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dash-app
  namespace: ethicsdash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dash-app
  template:
    metadata:
      labels:
        app: dash-app
    spec:
      containers:
      - name: dash-app
        image: <YOUR_DASH_IMAGE>  # e.g. ethicsdashacr.azurecr.io/ethicsdash-app:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8050
        envFrom:
        - secretRef:
            name: ethicsdash-env-secret
        - configMapRef:
            name: ethicsdash-config
        readinessProbe:
          tcpSocket:
            port: 8050
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8050
          initialDelaySeconds: 30
          periodSeconds: 20

---
# Service for Dash Application
apiVersion: v1
kind: Service
metadata:
  name: dash-app
  namespace: ethicsdash
spec:
  selector:
    app: dash-app
  ports:
  - port: 8050
    targetPort: 8050

---
# Deployment for AI Frontend (Nginx)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-frontend
  namespace: ethicsdash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-frontend
  template:
    metadata:
      labels:
        app: ai-frontend
    spec:
      containers:
      - name: ai-frontend
        image: <YOUR_FRONTEND_IMAGE>  # e.g. ethicsdashacr.azurecr.io/ethicsdash-frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
# Service for AI Frontend
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend
  namespace: ethicsdash
spec:
  selector:
    app: ai-frontend
  ports:
  - port: 80
    targetPort: 80

---
# Ingress to route traffic (requires an Ingress Controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ethicsdash-ingress
  namespace: ethicsdash
  annotations:
    kubernetes.io/ingress.class: gce
spec:
  rules:
  - host: <YOUR_HOST>  # e.g. ethicsdash.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ai-backend
            port:
              number: 5000
      - path: /dash
        pathType: Prefix
        backend:
          service:
            name: dash-app
            port:
              number: 8050
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ai-frontend
            port:
              number: 80 