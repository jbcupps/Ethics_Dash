version: '3.8'

services:
  # Fast API Backend
  ai-backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env  # Load local environment variables into container
    environment:
      - MONGODB_URI=mongodb://ai-mongo:27017/ethics_db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      # PVB Blockchain Configuration
      - WEB3_PROVIDER_URL=http://ganache:8545
      - REGISTRY_CONTRACT_ADDRESS=${REGISTRY_CONTRACT_ADDRESS}
      - SUBMISSION_CONTRACT_ADDRESS=${SUBMISSION_CONTRACT_ADDRESS}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      ai-mongo:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./documents:/app/documents
    networks:
      - ai-network

  # React Frontend
  ai-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      ai-backend:
        condition: service_healthy
    networks:
      - ai-network

  # MongoDB Database
  ai-mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/ethics_db --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - ai-network

  # DB Initialization Service
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.db-init
    environment:
      - MONGO_URI=mongodb://ai-mongo:27017/ethics_db
    command: ["python", "/scripts/populate_memes.py", "/app/documents/memes.json"]
    restart: "no"
    depends_on:
      ai-mongo:
        condition: service_healthy
    volumes:
      - ./documents:/app/documents
    networks:
      - ai-network

  # Ganache Blockchain for PVB Development
  ganache:
    image: trufflesuite/ganache:latest
    ports:
      - "7545:8545"  # Map container port 8545 to host port 7545
    command: >
      ganache
      --host 0.0.0.0
      --port 8545
      --accounts 10
      --deterministic
      --mnemonic "ethics dashboard physical verification blockchain development test mnemonic phrase"
      --networkId 1337
      --gasLimit 10000000
      --gasPrice 20000000000
      --defaultBalanceEther 100
      --blockTime 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - ai-network

# Additional services can be added here
# For example, a service for model fine-tuning, etc.

# Volume definitions
volumes:
  mongodb_data:

# Network definition
networks:
  ai-network:
    driver: bridge

# You can add other services (like a database) here
# volumes:
#   db-data:

# Uncomment and configure these variables in .env file
# ACR_REGISTRY=yourregistry.azurecr.io
# ACR_USERNAME=yourusername
# ACR_PASSWORD=yourpassword 