# Workflow for building, deploying, and troubleshooting the Ethics Dashboard
name: Build, Deploy, and Troubleshoot to Azure Web App

on:
  workflow_dispatch: # Only allow manual trigger

env:
  AZURE_WEBAPP_NAME: ethicsdash-cicd-app
  ACR_NAME: ethicsdashacr
  ACR_LOGIN_SERVER: ethicsdashacr.azurecr.io
  RESOURCE_GROUP: ethicsdash-rg
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated version
        with:
          fetch-depth: 0

      - name: Login to Azure via OIDC
        uses: azure/login@v2 # Updated version
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Kept version, seems current

      - name: Build and push Dash app image
        uses: docker/build-push-action@v6 # Updated version
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/dash:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/dash:latest
          platforms: linux/amd64 # Added platform

      - name: Build and push backend image
        uses: docker/build-push-action@v6 # Updated version
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/backend:latest
          platforms: linux/amd64 # Added platform

      - name: Build and push frontend image
        uses: docker/build-push-action@v6 # Updated version
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          platforms: linux/amd64 # Added platform

      - name: Build and push db-init image
        uses: docker/build-push-action@v6 # Updated version
        with:
          context: .
          file: Dockerfile.db-init
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/db-init:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/db-init:latest
          platforms: linux/amd64 # Added platform

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated version
        with:
          fetch-depth: 0

      - name: Login to Azure via OIDC
        uses: azure/login@v2 # Updated version
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Enable container logging
        run: |
          az webapp log config --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --docker-container-logging filesystem

      - name: Deploy multi-container Web App using Docker Compose
        uses: azure/cli@v1 # Kept version, seems current
        with:
          azcliversion: latest
          inlineScript: |
            az webapp config container set \\
              --resource-group ${{ env.RESOURCE_GROUP }} \\
              --name ${{ env.AZURE_WEBAPP_NAME }} \\
              --multicontainer-config-type compose \\
              --multicontainer-config-file docker-compose.yml

      - name: Wait for Web App to start
        run: |
          echo "Waiting for Azure Web App to start..."
          for i in {1..30}; do
            state=$(az webapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --query state -o tsv)
            echo "Current state: $state"
            if [ "$state" = "Running" ]; then
              echo "Web App is running"
              exit 0
            fi
            sleep 10
          done
          echo "Web App did not start within expected time"
          exit 1

      - name: Download and display container logs
        run: |
          az webapp log download \\
            --resource-group ${{ env.RESOURCE_GROUP }} \\
            --name ${{ env.AZURE_WEBAPP_NAME }} \\
            --log-file logs.zip
          unzip logs.zip -d logs
          echo "==== Last 200 lines of logs ===="
          find logs -type f -exec tail -n 200 {} \\; || true

      - name: Display Application URL
        run: |
          echo "Front-end is available at: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

      - name: Azure Logout # Added logout step
        run: az logout
        if: always()