name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Azure Container Registry settings
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: ethics-dash
  IMAGE_TAG: ${{ github.sha }}
  
  # Azure Container App settings
  AZURE_RESOURCE_GROUP: ethicsdash
  CONTAINER_APP_NAME: ethicsdash-app
  CONTAINER_APP_ENV: ethicsdash

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy to Azure Container App
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # Check if Container App exists
            if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
              echo "Updating existing Container App..."
              
              # Update existing Container App with new image
              az containerapp update \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
                --registry-server ${{ env.ACR_REGISTRY }}
            else
              echo "Creating new Container App..."
              
              # Create new Container App
              az containerapp create \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_APP_ENV }} \
                --image ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
                --target-port 8050 \
                --ingress external \
                --min-replicas 1 \
                --max-replicas 3 \
                --registry-server ${{ env.ACR_REGISTRY }} \
                --secrets "mongo-uri=${{ secrets.MONGO_URI }}" "anthropic-key=${{ secrets.ANTHROPIC_API_KEY }}" \
                --env-vars "MONGO_URI=secretref:mongo-uri" "ANTHROPIC_API_KEY=secretref:anthropic-key"
            fi
            
      - name: Get Container App URL
        if: success()
        uses: azure/CLI@v2
        with:
          inlineScript: |
            APP_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
            echo "::notice::Application deployed successfully to https://${APP_URL}" 