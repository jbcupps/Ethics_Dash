name: Azure CICD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering

permissions:
  id-token: write # Required for Azure login using OIDC
  contents: read   # Required to checkout the repository

env:
  # ACR Configuration - Stored in GitHub secrets temporarily
  ACR_REGISTRY_NAME: ${{ secrets.ACR_REGISTRY_NAME }}
  # Image names
  IMAGE_NAME_APP: "ethics-dash-app"
  IMAGE_NAME_BACKEND: "ai-ethical-review-backend"
  IMAGE_NAME_FRONTEND: "ai-ethical-review-frontend"
  # Key Vault configuration
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure CLI login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # Note: Using OIDC authentication - no need for client-secret

    - name: Verify Azure connection
      run: |
        echo "Verifying Azure connection..."
        az account show
        echo "Verifying ACR access..."
        az acr show --name ${{ env.ACR_REGISTRY_NAME }} --resource-group ${{ env.ACR_REGISTRY_NAME }}-rg || echo "Note: Unable to show ACR info. Continuing with workflow..."
        echo "Verifying Key Vault access..."
        az keyvault show --name ${{ env.KEY_VAULT_NAME }} || echo "Note: Unable to show Key Vault info. Continuing with workflow..."

    - name: Get secrets from Azure Key Vault
      uses: azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEY_VAULT_NAME }}
        secrets: 'API-KEY, API-SECRET, API-ENDPOINT, API-VERSION, NODE-ENV, LOG-LEVEL' # Retrieve secrets from Key Vault
      id: keyvault-secrets

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v2
      with:
        login-server: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
        # OIDC auth from the previous step is used - no username/password needed

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # --- Build and Push main app service ---
    - name: Build and push main app image
      uses: docker/build-push-action@v5
      with:
        context: . # Root context for the main Dockerfile
        file: ./Dockerfile # Path relative to root
        push: true
        tags: |
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_APP }}:latest
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_APP }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          API_KEY=${{ steps.keyvault-secrets.outputs.API-KEY }}
          API_SECRET=${{ steps.keyvault-secrets.outputs.API-SECRET }}
          API_ENDPOINT=${{ steps.keyvault-secrets.outputs.API-ENDPOINT }}
          API_VERSION=${{ steps.keyvault-secrets.outputs.API-VERSION }}
          NODE_ENV=${{ steps.keyvault-secrets.outputs.NODE-ENV }}
          LOG_LEVEL=${{ steps.keyvault-secrets.outputs.LOG-LEVEL }}

    # --- Build and Push 'ai-backend' service ---
    - name: Build and push 'ai-backend' image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/backend/Dockerfile
        push: true
        tags: |
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_BACKEND }}:latest
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          API_KEY=${{ steps.keyvault-secrets.outputs.API-KEY }}
          API_SECRET=${{ steps.keyvault-secrets.outputs.API-SECRET }}
          API_ENDPOINT=${{ steps.keyvault-secrets.outputs.API-ENDPOINT }}
          API_VERSION=${{ steps.keyvault-secrets.outputs.API-VERSION }}
          NODE_ENV=${{ steps.keyvault-secrets.outputs.NODE-ENV }}
          LOG_LEVEL=${{ steps.keyvault-secrets.outputs.LOG-LEVEL }}

    # --- Build and Push 'ai-frontend' service ---
    - name: Build and push 'ai-frontend' image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_FRONTEND }}:latest
          ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          API_ENDPOINT=${{ steps.keyvault-secrets.outputs.API-ENDPOINT }}
          NODE_ENV=${{ steps.keyvault-secrets.outputs.NODE-ENV }}

    - name: Logout from Azure
      if: always()
      run: |
        az logout
        
    - name: Notify on success
      if: success()
      run: |
        echo "Build and push completed successfully!"
        echo "Images pushed to ${{ env.ACR_REGISTRY_NAME }}.azurecr.io"

    - name: Notify on failure
      if: failure()
      run: |
        echo "Build and push failed!"
        exit 1 