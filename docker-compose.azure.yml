version: '3.4'

services:
  # AI Ethical Work Backend API Service
  ai-backend:
    image: ethicsdashacr.azurecr.io/backend:latest
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://ai-mongo:27017/ethics_db
      - BACKEND_HOST=ai-backend
      - BACKEND_PORT=5000
    restart: always
    depends_on:
      - ai-mongo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ethicsdash-network

  # AI Ethical Work Frontend Service (Nginx)
  ai-frontend:
    image: ethicsdashacr.azurecr.io/frontend:latest
    ports:
      - "80:80"
    environment:
      - BACKEND_HOST=ai-backend
      - BACKEND_PORT=5000
    restart: always
    depends_on:
      - ai-backend
    networks:
      - ethicsdash-network

  # AI Ethical Work MongoDB Service
  ai-mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - ethicsdash-network

  # Database initialization service - configured as a non-essential init container
  # Using 'init: true' signals this is an initialization container that can exit
  db-init:
    image: ethicsdashacr.azurecr.io/db-init:latest
    environment:
      - MONGO_URI=mongodb://ai-mongo:27017/ethics_db
    command: ["python", "/scripts/populate_memes.py", "/documents/memes.json"]
    restart: "no"
    depends_on:
      - ai-mongo
    deploy:
      restart_policy:
        condition: none
    labels:
      - "com.microsoft.azure.app.type=init"
    networks:
      - ethicsdash-network

networks:
  ethicsdash-network:
    driver: bridge

volumes:
  mongo_data: 