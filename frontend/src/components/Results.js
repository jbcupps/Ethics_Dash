import React from 'react';

// Helper function to capitalize the first letter
const capitalize = (s) => {
  if (typeof s !== 'string') return ''
  return s.charAt(0).toUpperCase() + s.slice(1).replace(/_/g, ' ')
}

const Results = ({ 
  prompt, 
  originModelUsed, 
  analysisModelUsed, 
  initialResponse, 
  ethicalAnalysisText, 
  ethicalScores 
}) => {
  // Don't render anything if no prompt is available (initial state or error before R1)
  if (!prompt) {
    return null;
  }

  // Separate ethical dimensions from memetics for potentially different rendering
  const standardEthicalDimensions = ethicalScores 
      ? Object.keys(ethicalScores).filter(key => key !== 'memetics') 
      : [];
  const memeticsData = ethicalScores?.memetics;
  const hasScores = standardEthicalDimensions.length > 0 || !!memeticsData;

  return (
    <div className="results-container card">
      <h2>Results</h2>
      
      {/* Display Used Models */}
      <div className="model-info-box">
        {originModelUsed && 
          <p data-tooltip-id="results-tooltip" data-tooltip-content="The LLM used to generate the initial response (R1).">
            <strong>Origin Model Used (R1):</strong> {originModelUsed}
          </p>}
        {analysisModelUsed && 
          <p data-tooltip-id="results-tooltip" data-tooltip-content="The LLM used to perform the ethical analysis (R2) based on the ontology.">
            <strong>Analysis Model Used (R2):</strong> {analysisModelUsed}
          </p>}
      </div>
      
      {/* Initial Prompt */}
      <div data-tooltip-id="results-tooltip" data-tooltip-content="The original prompt submitted by the user (P1).">
        <h3>Initial Prompt (P1)</h3>
        <div className="result-box"><pre>{prompt}</pre></div>
      </div>
      
      {/* Generated Response (R1) */}
      {initialResponse && (
        <div data-tooltip-id="results-tooltip" data-tooltip-content="The raw response generated by the Origin Model (R1).">
          <h3>Generated Response (R1)</h3>
          <div className="result-box"><pre>{initialResponse}</pre></div>
        </div>
      )}
      
      {/* Textual Ethical Analysis (R2) */}
      {ethicalAnalysisText && (
        <div data-tooltip-id="results-tooltip" data-tooltip-content="The textual summary of the ethical analysis performed by the Analysis Model (R2).">
          <h3>Ethical Review Summary (R2)</h3>
          <div className="result-box"><pre>{ethicalAnalysisText}</pre></div>
        </div>
      )}

      {/* Ethical Scores Section (R2) (Conditional) */}
      {ethicalAnalysisText && ( 
        <div className="scores-section" data-tooltip-id="results-tooltip" data-tooltip-content="Structured scores generated by the Analysis Model (R2) based on the ontology."> 
          <h3>Ethical Scoring (R2)</h3>
          {ethicalScores && hasScores ? (
            <>
              {/* Render standard ethical dimensions */}
              {standardEthicalDimensions.map((dimKey) => {
                const dimensionData = ethicalScores?.[dimKey]; 
                if (!dimensionData) return null;
                return (
                  <div key={dimKey} className="dimension-score-box">
                    <h4>{capitalize(dimKey)}</h4>
                    <p><strong>Adherence Score:</strong> {dimensionData?.adherence_score ?? 'N/A'} / 10</p>
                    <p><strong>Confidence Score:</strong> {dimensionData?.confidence_score ?? 'N/A'} / 10</p>
                    <p><strong>Justification:</strong></p>
                    <pre>{dimensionData?.justification || 'N/A'}</pre>
                  </div>
                );
              })}
              
              {/* Render Memetics section */}
              {memeticsData && (
                 <div key="memetics" className="dimension-score-box">
                   <h4>Memetics</h4>
                   <p><strong>Transmissibility Score:</strong> {memeticsData?.transmissibility_score ?? 'N/A'} / 10</p>
                   <p><strong>Persistence Score:</strong> {memeticsData?.persistence_score ?? 'N/A'} / 10</p>
                   <p><strong>Adaptability Score:</strong> {memeticsData?.adaptability_score ?? 'N/A'} / 10</p>
                   <p><strong>Confidence Score:</strong> {memeticsData?.confidence_score ?? 'N/A'} / 10</p>
                   <p><strong>Justification:</strong></p>
                   <pre>{memeticsData?.justification || 'N/A'}</pre>
                 </div>
              )}
            </>
          ) : (
            <p><em>Ethical scoring data could not be generated or parsed.</em></p>
          )}
        </div>
      )}
      
      {/* Handle case where R1 succeeded but R2 failed */}
      {initialResponse && !ethicalAnalysisText && (
         <div>
           <h3>Ethical Review Summary (R2)</h3>
           <p><em>Ethical analysis could not be generated.</em></p>
         </div>
      )}
    </div>
  );
};

export default Results; 